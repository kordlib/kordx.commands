package dev.kordx.commands.argument.extension

import dev.kordx.commands.argument.result.ArgumentResult
import dev.kordx.commands.argument.result.extension.FilterResult
import dev.kordx.commands.argument.result.extension.filter

/**
 * Returns a new Argument that limits the acceptable range of values to the [range].
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
fun <T, CONTEXT> dev.kordx.commands.argument.Argument<T, CONTEXT>.inRange(
        range: ClosedRange<T>
): dev.kordx.commands.argument.Argument<T, CONTEXT> where T : Number, T : Comparable<T> = object : dev.kordx.commands.argument.Argument<T, CONTEXT> by this {

    override suspend fun parse(text: String, fromIndex: Int, context: CONTEXT): ArgumentResult<T> {
        return this@inRange.parse(text, fromIndex, context).filter(fromIndex) {
            if (it in range) FilterResult.Pass
            else FilterResult.Fail("expected number in range of [${range.start}..${range.endInclusive}]")
        }
    }

}

/**
 * Returns a new Argument that limits the acceptable range of values to positive numbers (including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("longPositive")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Long, CONTEXT>.positive(): dev.kordx.commands.argument.Argument<Long, CONTEXT> = inRange(0L..Long.MAX_VALUE)

/**
 * Returns a new Argument that limits the acceptable range of values to positive numbers (not including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("longStrictPositive")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Long, CONTEXT>.strictPositive(): dev.kordx.commands.argument.Argument<Long, CONTEXT> = inRange(1L..Long.MAX_VALUE)

/**
 * Returns a new Argument that limits the acceptable range of values to negative numbers (including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("longNegative")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Long, CONTEXT>.negative(): dev.kordx.commands.argument.Argument<Long, CONTEXT> = filter {
    if (it <= 0) FilterResult.Pass
    else FilterResult.Fail("expected number in range of [${Long.MIN_VALUE}..0]")
}

/**
 * Returns a new Argument that limits the acceptable range of values to negative numbers (not including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("longStrictNegative")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Long, CONTEXT>.strictNegative(): dev.kordx.commands.argument.Argument<Long, CONTEXT> = filter {
    if (it <= -1) FilterResult.Pass
    else FilterResult.Fail("expected number in range of [${Long.MIN_VALUE}..-1]")
}

/**
 * Returns a new Argument that limits the acceptable range of values to positive numbers (including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("intPositive")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Int, CONTEXT>.positive(): dev.kordx.commands.argument.Argument<Int, CONTEXT> = inRange(0..Int.MAX_VALUE)

/**
 * Returns a new Argument that limits the acceptable range of values to positive numbers (not including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("intStrictPositive")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Int, CONTEXT>.strictPositive(): dev.kordx.commands.argument.Argument<Int, CONTEXT> = inRange(1..Int.MAX_VALUE)

/**
 * Returns a new Argument that limits the acceptable range of values to negative numbers (including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("intNegative")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Int, CONTEXT>.negative(): dev.kordx.commands.argument.Argument<Int, CONTEXT> = filter {
    if (it <= 0) FilterResult.Pass
    else FilterResult.Fail("expected number in range of [${Int.MIN_VALUE}..0]")
}

/**
 * Returns a new Argument that limits the acceptable range of values to negative numbers (not including 0).
 *
 * > Examples generated by this argument will only consider the current range. More complex Arguments
 * might thus return invalid example values.
 */
@JvmName("LongStrictNegative")
fun <CONTEXT> dev.kordx.commands.argument.Argument<Int, CONTEXT>.strictNegative(): dev.kordx.commands.argument.Argument<Int, CONTEXT> = filter {
    if (it <= -1) FilterResult.Pass
    else FilterResult.Fail("expected number in range of [${Int.MIN_VALUE}..-1]")
}
